name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        continue-on-error: false

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Build application
        run: npm run build

      - name: Verify infrastructure structure
        run: |
          echo "🔍 Verifying infrastructure files..."

          # Check that infra directory exists
          if [ ! -d "infra" ]; then
            echo "❌ Error: infra/ directory not found"
            exit 1
          fi

          # Check required files exist
          REQUIRED_FILES=(
            "infra/main.bicep"
            "infra/main.parameters.json"
            "azure.yaml"
            "Dockerfile"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Error: Required file not found: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done

          echo "✅ Infrastructure structure verified"

      - name: Validate Bicep templates
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build Bicep templates
        run: |
          echo "🔨 Validating Bicep templates..."
          az bicep build --file infra/main.bicep
          echo "✅ Bicep validation passed"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Azure Developer CLI
        uses: Azure/setup-azd@v1.0.0

      - name: Azure Login (Federated Identity)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set environment variables
        run: |
          echo "AZURE_ENV_NAME=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod') || 'dev' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Verify azd configuration
        run: |
          echo "📋 Verifying azure.yaml configuration..."

          # Check that azure.yaml points to correct infra path
          INFRA_PATH=$(grep -A 2 "^infra:" azure.yaml | grep "path:" | awk '{print $2}')
          echo "Infrastructure path in azure.yaml: $INFRA_PATH"

          if [ "$INFRA_PATH" != "./infra" ]; then
            echo "⚠️  Warning: azure.yaml infra path is '$INFRA_PATH', expected './infra'"
            echo "This may cause deployment issues"
          else
            echo "✅ Infrastructure path is correct"
          fi

          # Display environment being deployed to
          echo "🎯 Deploying to environment: ${{ env.AZURE_ENV_NAME }}"
          echo "📦 Image tag: ${{ github.sha }}"

      - name: Configure azd environment
        run: |
          echo "⚙️  Configuring azd environment..."
          azd env new ${{ env.AZURE_ENV_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} || azd env select ${{ env.AZURE_ENV_NAME }}

          # Set required environment variables
          azd env set AZURE_SUBSCRIPTION_ID ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azd env set AZURE_LOCATION ${{ secrets.AZURE_LOCATION || 'eastus' }}
          azd env set AZURE_CONTAINER_REGISTRY_NAME ${{ secrets.AZURE_CONTAINER_REGISTRY_NAME }}
          azd env set DIRECT_LINE_SECRET ${{ secrets.DIRECT_LINE_SECRET }}
          azd env set SESSION_SECRET ${{ secrets.SESSION_SECRET }}
          azd env set AZURE_CLIENT_ID ${{ secrets.ENTRA_CLIENT_ID }}
          azd env set AZURE_CLIENT_SECRET ${{ secrets.ENTRA_CLIENT_SECRET }}
          azd env set AZURE_TENANT_ID ${{ secrets.ENTRA_TENANT_ID }}
          azd env set IMAGE_TAG ${{ github.sha }}

          echo "✅ Environment configured"
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy to Azure (azd up)
        run: |
          echo "🚀 Starting deployment..."
          azd up --no-prompt
          echo "✅ Deployment completed"
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Get deployment outputs
        id: outputs
        run: |
          echo "📤 Retrieving deployment outputs..."

          # Get container app FQDN
          FQDN=$(azd env get-values | grep AZURE_CONTAINER_APP_FQDN | cut -d'=' -f2 | tr -d '"')

          if [ -z "$FQDN" ]; then
            echo "⚠️  Warning: Could not retrieve FQDN from azd outputs"
            # Try alternative method using Azure CLI
            FQDN=$(az containerapp show \
              --name copilot-mcp-${{ env.AZURE_ENV_NAME }} \
              --resource-group rg-copilot-mcp-${{ env.AZURE_ENV_NAME }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv 2>/dev/null || echo "")
          fi

          if [ -z "$FQDN" ]; then
            echo "❌ Error: Could not determine container app FQDN"
            exit 1
          fi

          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT
          echo "url=https://$FQDN" >> $GITHUB_OUTPUT
          echo "✅ FQDN: $FQDN"

      - name: Health check
        run: |
          echo "🏥 Performing health check..."
          echo "Waiting for deployment to be ready..."
          sleep 30

          HEALTH_URL="https://${{ steps.outputs.outputs.fqdn }}/health"
          echo "Checking health endpoint: $HEALTH_URL"

          MAX_RETRIES=10
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || echo "000")

            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Health check passed!"
              echo "🎉 Service is healthy and responding"
              exit 0
            fi

            echo "⏳ Health check returned: $HTTP_CODE (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            RETRY_COUNT=$((RETRY_COUNT + 1))

            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              sleep 10
            fi
          done

          echo "❌ Health check failed after $MAX_RETRIES attempts"
          echo "Service may not be healthy or reachable"
          exit 1

      - name: Post deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.AZURE_ENV_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ steps.outputs.outputs.fqdn }}" ]; then
            echo "### 🌐 Service Endpoints" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Endpoint | URL |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-----|" >> $GITHUB_STEP_SUMMARY
            echo "| 🏥 Health Check | [https://${{ steps.outputs.outputs.fqdn }}/health](https://${{ steps.outputs.outputs.fqdn }}/health) |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔐 Authentication | [https://${{ steps.outputs.outputs.fqdn }}/auth/login](https://${{ steps.outputs.outputs.fqdn }}/auth/login) |" >> $GITHUB_STEP_SUMMARY
            echo "| 📡 MCP Server | [https://${{ steps.outputs.outputs.fqdn }}/mcp](https://${{ steps.outputs.outputs.fqdn }}/mcp) |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📝 Infrastructure" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Path:** \`./infra\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Module:** \`main.bicep\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Parameters:** \`main.parameters.json\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Warning:** Could not retrieve service endpoints" >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: Deployment status notification
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'dev' }}"

          if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
            echo "✅ Deployment succeeded to $ENV_NAME environment"
            echo "🎉 All checks passed"
          else
            echo "❌ Deployment failed to $ENV_NAME environment"
            echo "🔍 Check the workflow logs for details"
            exit 1
          fi
